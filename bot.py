#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import random
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import aioschedule
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import *

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = BOT_TOKEN
WEBAPP_URL = WEBAPP_URL
TIMEZONE = TIMEZONE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReminderStates(StatesGroup):
    waiting_for_reminder_choice = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def init_db():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            reminders_enabled BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_data (
            user_id INTEGER,
            date TEXT,
            kcal INTEGER DEFAULT 0,
            protein INTEGER DEFAULT 0,
            fat INTEGER DEFAULT 0,
            carbs INTEGER DEFAULT 0,
            water_ml INTEGER DEFAULT 0,
            steps INTEGER DEFAULT 0,
            sleep_hours INTEGER DEFAULT 0,
            habits_done INTEGER DEFAULT 0,
            habits_total INTEGER DEFAULT 0,
            note TEXT,
            PRIMARY KEY (user_id, date)
        )
    ''')
    conn.commit()
    conn.close()

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
MOTIVATION_QUOTES = [
    "üê∞ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
    "üí™ –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
    "üåü –ó–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –Ω–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∞ —Å–ø–æ—Å–æ–± –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "üçé –Ø–±–ª–æ–∫–æ –≤ –¥–µ–Ω—å - –∏ –≤—Ä–∞—á –Ω–µ –Ω—É–∂–µ–Ω. –ù–æ –ª—É—á—à–µ —Å—ä–µ—Å—Ç—å –¥–≤–∞!",
    "üíß –í–æ–¥–∞ - –∏—Å—Ç–æ—á–Ω–∏–∫ –∂–∏–∑–Ω–∏. –ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å!",
    "üö∂‚Äç‚ôÇÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ - —ç—Ç–æ –∂–∏–∑–Ω—å. –î–∞–∂–µ 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!",
    "üò¥ –•–æ—Ä–æ—à–∏–π —Å–æ–Ω - –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–Ω—è",
    "üéØ –¶–µ–ª—å –±–µ–∑ –ø–ª–∞–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –∂–µ–ª–∞–Ω–∏–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–ª–∞–Ω!",
    "üåà –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞",
    "üî• –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL)))
    keyboard.add(KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"))
    keyboard.add(KeyboardButton("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    return keyboard

def get_reminders_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="reminders_on"),
        InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="reminders_off")
    )
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

def get_help_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL)))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, message.from_user.last_name))
    conn.commit()
    conn.close()
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø Lumo üê∞ —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è.

–í–º–µ—Å—Ç–µ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
üçΩ –ü–∏—Ç–∞–Ω–∏–µ –∏ –∫–∞–ª–æ—Ä–∏–∏
üíß –í–æ–¥—É –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é  
üò¥ –°–æ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
üö∂‚Äç‚ôÇÔ∏è –®–∞–≥–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏

–ù–∞–∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message_handler(commands=['open'])
async def cmd_open(message: types.Message):
    await message.answer("üì± –û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...", reply_markup=get_main_keyboard())

@dp.message_handler(commands=['progress'])
async def cmd_progress(message: types.Message):
    await show_progress(message.from_user.id)

@dp.message_handler(commands=['motivation'])
async def cmd_motivation(message: types.Message):
    quote = random.choice(MOTIVATION_QUOTES)
    await message.answer(f"üí™ {quote}")

@dp.message_handler(commands=['reminders_on'])
async def cmd_reminders_on(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET reminders_enabled = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    await message.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.")

@dp.message_handler(commands=['reminders_off'])
async def cmd_reminders_off(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET reminders_enabled = FALSE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –ú–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /reminders_on")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(lambda message: message.text == "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def open_app(message: types.Message):
    await message.answer("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é Lumo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...", reply_markup=get_main_keyboard())

@dp.message_handler(lambda message: message.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: types.Message):
    await message.answer("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=get_reminders_keyboard())

@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_menu(message: types.Message):
    await show_progress(message.from_user.id)

@dp.message_handler(lambda message: message.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def motivation_menu(message: types.Message):
    quote = random.choice(MOTIVATION_QUOTES)
    await message.answer(f"üí™ {quote}")

@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_menu(message: types.Message):
    help_text = """
‚ùì –ß—Ç–æ —è —É–º–µ—é?

üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - —Å–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/open - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ  
/progress - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/motivation - –º–æ—Ç–∏–≤–∞—Ü–∏—è
/reminders_on - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/reminders_off - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    await message.answer(help_text, reply_markup=get_help_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query_handler(lambda c: c.data == "reminders_on")
async def enable_reminders(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET reminders_enabled = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    await callback_query.message.edit_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "reminders_off")
async def disable_reminders(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET reminders_enabled = FALSE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    await callback_query.message.edit_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
async def show_progress(user_id: int):
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT kcal, protein, fat, carbs, water_ml, steps, sleep_hours, habits_done, habits_total, note
        FROM user_data WHERE user_id = ? AND date = ?
    ''', (user_id, yesterday))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        kcal, protein, fat, carbs, water_ml, steps, sleep_hours, habits_done, habits_total, note = result
        date_str = datetime.strptime(yesterday, '%Y-%m-%d').strftime('%d %B')
        
        progress_text = f"""
üìä –í—á–µ—Ä–∞ ({date_str}):

üçΩ {kcal or 0} –∫–∫–∞–ª ¬∑ –ë {protein or 0} / –ñ {fat or 0} / –£ {carbs or 0}
üíß –í–æ–¥–∞: {(water_ml or 0)/1000:.1f} –ª   üëü –®–∞–≥–∏: {steps or 0}   üí§ –°–æ–Ω: {sleep_hours or 0} —á
‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏: {habits_done or 0}/{habits_total or 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        """
        
        if note:
            progress_text += f"\nüìù –ó–∞–º–µ—Ç–∫–∞: {note}"
    else:
        progress_text = "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
    
    await bot.send_message(user_id, progress_text)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_water_reminder(user_id: int):
    await bot.send_message(user_id, "üíß –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã! –û—Å—Ç–∞–≤–∞–π—Å—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ü•§")

async def send_movement_reminder(user_id: int):
    await bot.send_message(user_id, "üö∂‚Äç‚ôÇÔ∏è –í—Å—Ç–∞–Ω—å –∏ –ø—Ä–æ–π–¥–∏—Å—å! –î–≤–∏–∂–µ–Ω–∏–µ - —ç—Ç–æ –∂–∏–∑–Ω—å üí™")

async def send_diary_reminder(user_id: int):
    await bot.send_message(user_id, "‚úçÔ∏è –ó–∞–≥–ª—è–Ω–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫! üì±")

async def send_habits_reminder(user_id: int):
    await bot.send_message(user_id, "üê∞ –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ‚ú®")

async def send_evening_report(user_id: int):
    today = datetime.now().strftime('%Y-%m-%d')
    
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT kcal, water_ml, steps, habits_done, habits_total
        FROM user_data WHERE user_id = ? AND date = ?
    ''', (user_id, today))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        kcal, water_ml, steps, habits_done, habits_total = result
        habits_percent = (habits_done / habits_total * 100) if habits_total > 0 else 0
        
        report_text = f"""
üåô –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:

–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª {habits_percent:.0f}% –ø—Ä–∏–≤—ã—á–µ–∫, 
–≤—ã–ø–∏–ª {(water_ml or 0)/1000:.1f} –ª –≤–æ–¥—ã 
–∏ –ø—Ä–æ—à—ë–ª {steps or 0} —à–∞–≥–æ–≤ üëè

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –µ—â—ë –ª—É—á—à–µ! üöÄ
        """
    else:
        report_text = "üåô –ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üì±"
    
    await bot.send_message(user_id, report_text)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def scheduler():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def setup_scheduler():
    # –í–æ–¥–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (—Å 8:00 –¥–æ 22:00)
    for hour in [8, 10, 12, 14, 16, 18, 20, 22]:
        aioschedule.every().day.at(f"{hour:02d}:00").do(send_water_reminder_to_all)
    
    # –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (—Å 9:00 –¥–æ 21:00)
    for hour in range(9, 22):
        aioschedule.every().day.at(f"{hour:02d}:00").do(send_movement_reminder_to_all)
    
    # –î–Ω–µ–≤–Ω–∏–∫ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    for hour in [10, 14, 18, 22]:
        aioschedule.every().day.at(f"{hour:02d}:00").do(send_diary_reminder_to_all)
    
    # –ü—Ä–∏–≤—ã—á–∫–∏ –≤–µ—á–µ—Ä–æ–º
    aioschedule.every().day.at("20:00").do(send_habits_reminder_to_all)
    
    # –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç
    aioschedule.every().day.at("21:00").do(send_evening_report_to_all)

async def send_water_reminder_to_all():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE reminders_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    
    for (user_id,) in users:
        try:
            await send_water_reminder(user_id)
        except Exception as e:
            logger.error(f"Error sending water reminder to {user_id}: {e}")

async def send_movement_reminder_to_all():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE reminders_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    
    for (user_id,) in users:
        try:
            await send_movement_reminder(user_id)
        except Exception as e:
            logger.error(f"Error sending movement reminder to {user_id}: {e}")

async def send_diary_reminder_to_all():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE reminders_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    
    for (user_id,) in users:
        try:
            await send_diary_reminder(user_id)
        except Exception as e:
            logger.error(f"Error sending diary reminder to {user_id}: {e}")

async def send_habits_reminder_to_all():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE reminders_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    
    for (user_id,) in users:
        try:
            await send_habits_reminder(user_id)
        except Exception as e:
            logger.error(f"Error sending habits reminder to {user_id}: {e}")

async def send_evening_report_to_all():
    conn = sqlite3.connect('lumo_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE reminders_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    
    for (user_id,) in users:
        try:
            await send_evening_report(user_id)
        except Exception as e:
            logger.error(f"Error sending evening report to {user_id}: {e}")

# Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=['web_app_data'])
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        conn = sqlite3.connect('lumo_bot.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_data 
            (user_id, date, kcal, protein, fat, carbs, water_ml, steps, sleep_hours, habits_done, habits_total, note)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, 
            data.get('date', datetime.now().strftime('%Y-%m-%d')),
            data.get('kcal', 0),
            data.get('protein', 0),
            data.get('fat', 0),
            data.get('carbs', 0),
            data.get('water_ml', 0),
            data.get('steps', 0),
            data.get('sleep_hours', 0),
            data.get('habits_done', 0),
            data.get('habits_total', 0),
            data.get('note', '')
        ))
        
        conn.commit()
        conn.close()
        
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üìä")
        
    except Exception as e:
        logger.error(f"Error handling webapp data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    init_db()
    await setup_scheduler()
    asyncio.create_task(scheduler())
    logger.info("Bot started!")

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
